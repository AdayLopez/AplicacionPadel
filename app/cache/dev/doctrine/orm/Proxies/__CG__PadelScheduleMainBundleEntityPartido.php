<?php

namespace Proxies\__CG__\PadelSchedule\MainBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Partido extends \PadelSchedule\MainBundle\Entity\Partido implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'id', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'jornada', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'inscripcion1', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'inscripcion2', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'competicion', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'fechaHora', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'recursoAsignado', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoPropuesto1', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoPropuesto2', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoFinal', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoConfirmado'];
        }

        return ['__isInitialized__', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'id', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'jornada', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'inscripcion1', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'inscripcion2', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'competicion', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'fechaHora', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'recursoAsignado', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoPropuesto1', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoPropuesto2', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoFinal', '' . "\0" . 'PadelSchedule\\MainBundle\\Entity\\Partido' . "\0" . 'resultadoConfirmado'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Partido $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setJornada($jornada)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setJornada', [$jornada]);

        return parent::setJornada($jornada);
    }

    /**
     * {@inheritDoc}
     */
    public function getJornada()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getJornada', []);

        return parent::getJornada();
    }

    /**
     * {@inheritDoc}
     */
    public function setInscripcion1(\PadelSchedule\MainBundle\Entity\Inscripcion $inscripcion1 = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInscripcion1', [$inscripcion1]);

        return parent::setInscripcion1($inscripcion1);
    }

    /**
     * {@inheritDoc}
     */
    public function getInscripcion1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInscripcion1', []);

        return parent::getInscripcion1();
    }

    /**
     * {@inheritDoc}
     */
    public function setInscripcion2(\PadelSchedule\MainBundle\Entity\Inscripcion $inscripcion2 = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInscripcion2', [$inscripcion2]);

        return parent::setInscripcion2($inscripcion2);
    }

    /**
     * {@inheritDoc}
     */
    public function getInscripcion2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInscripcion2', []);

        return parent::getInscripcion2();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompeticion(\PadelSchedule\MainBundle\Entity\Competicion $competicion = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompeticion', [$competicion]);

        return parent::setCompeticion($competicion);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompeticion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompeticion', []);

        return parent::getCompeticion();
    }

    /**
     * {@inheritDoc}
     */
    public function setFechaHora($fechaHora)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFechaHora', [$fechaHora]);

        return parent::setFechaHora($fechaHora);
    }

    /**
     * {@inheritDoc}
     */
    public function getFechaHora()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFechaHora', []);

        return parent::getFechaHora();
    }

    /**
     * {@inheritDoc}
     */
    public function setRecursoAsignado($recursoAsignado)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRecursoAsignado', [$recursoAsignado]);

        return parent::setRecursoAsignado($recursoAsignado);
    }

    /**
     * {@inheritDoc}
     */
    public function getRecursoAsignado()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRecursoAsignado', []);

        return parent::getRecursoAsignado();
    }

    /**
     * {@inheritDoc}
     */
    public function setResultados($resultados)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultados', [$resultados]);

        return parent::setResultados($resultados);
    }

    /**
     * {@inheritDoc}
     */
    public function getResultados()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultados', []);

        return parent::getResultados();
    }

    /**
     * {@inheritDoc}
     */
    public function setResultadoConfirmado($resultadoConfirmado)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultadoConfirmado', [$resultadoConfirmado]);

        return parent::setResultadoConfirmado($resultadoConfirmado);
    }

    /**
     * {@inheritDoc}
     */
    public function getResultadoConfirmado()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultadoConfirmado', []);

        return parent::getResultadoConfirmado();
    }

    /**
     * {@inheritDoc}
     */
    public function setResultadoPropuesto1($resultadoPropuesto1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultadoPropuesto1', [$resultadoPropuesto1]);

        return parent::setResultadoPropuesto1($resultadoPropuesto1);
    }

    /**
     * {@inheritDoc}
     */
    public function getResultadoPropuesto1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultadoPropuesto1', []);

        return parent::getResultadoPropuesto1();
    }

    /**
     * {@inheritDoc}
     */
    public function setResultadoPropuesto2($resultadoPropuesto2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultadoPropuesto2', [$resultadoPropuesto2]);

        return parent::setResultadoPropuesto2($resultadoPropuesto2);
    }

    /**
     * {@inheritDoc}
     */
    public function getResultadoPropuesto2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultadoPropuesto2', []);

        return parent::getResultadoPropuesto2();
    }

    /**
     * {@inheritDoc}
     */
    public function setResultadoFinal($resultadoFinal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setResultadoFinal', [$resultadoFinal]);

        return parent::setResultadoFinal($resultadoFinal);
    }

    /**
     * {@inheritDoc}
     */
    public function getResultadoFinal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResultadoFinal', []);

        return parent::getResultadoFinal();
    }

}
